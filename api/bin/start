#!/usr/bin/env node

/**
 * Module dependencies.
 */
import http from 'http';
import app from '../app';
import https from "https";
import fs from "fs";
import chalk from "chalk";

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if(Number.isNaN(port)) {
        // named pipe
        return val;
    }

    if(port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3030');

app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */

const isHttpsServer = process.env.REACT_APP_HTTPS || false;
console.log('Starting', isHttpsServer ? chalk.red("HTTPS") : chalk.green("HTTP"), 'server...');

const server = isHttpsServer ?
    https.createServer({
        key: fs.readFileSync('server.key'),
        cert: fs.readFileSync('server.cert')
    }, app) :
    http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */
/* eslint no-console: 0 */
server.on('error', (error) => {
    if(error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch(error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    console.log(chalk.cyan(`Listening on ${bind}`));
});

export default isHttpsServer;
